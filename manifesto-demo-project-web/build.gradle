apply plugin: 'distribution'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.hidetake.ssh'

group = 'uk.co.manifesto.wcs'
version = '1.0.0'

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'org.hidetake:gradle-ssh-plugin:1.1.3'
  }
}

repositories {
	mavenLocal()
    mavenCentral()
}

dependencies {
  compile group: 'com.fatwire.cs', name: 'cs-core', version: '11.1.1.8.0'
  compile group: 'com.fatwire.cs', name: 'cs', version: '11.1.1.8.0'
  compile group: 'com.fatwire.cs', name: 'xcelerate', version: '11.1.1.8.0'
  
  compile group: 'com.fatwire.gst', name: 'gsf-facades', version: '11.8.0'
  compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '1.8.9'
  compile group: 'javax.servlet', name: 'servlet-api', version: '2.5'
  compile group: 'javax.servlet', name: 'jsp-api', version: '2.0'  
  compile group: 'commons-lang', name: 'commons-lang', version: '2.4'
  compile group: 'commons-logging', name: 'commons-logging', version: '1.1.1'
  compile group: 'uk.co.manifesto.wcs.csdt', name: 'manifesto-csdt', version: '1.0'
  
  testCompile group: 'junit', name: 'junit', version: '4.+'
  testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'

}

configurations {
    csdt
}
dependencies {
    csdt group: 'uk.co.manifesto.wcs.csdt', name: 'manifesto-csdt', version: '1.0'
}

remotes {
  development {
    host = 'localhost'
    port = 2222
    user = 'vagrant'
    password = 'vagrant'
    knownHosts = allowAnyHosts
  }
}

task createCsWorkspace(type: Zip, dependsOn: build) {
	from(fileTree(dir: project(":manifesto-demo-project-csdt").projectDir.path + File.separator + "envision")) {  
		exclude "cs_workspace/build"
		exclude "cs_workspace/bin"
		exclude "cs_workspace/Config"
		exclude "cs_workspace/*.gradle"
	}
    archiveName "${project.name}-csdt-${project.version}.zip" 
}

task deployProject(dependsOn: jar) << {
 
  def gsfDependency = configurations.compile.find { it.name.startsWith("gsf-facades") }
    
  ssh.run {
    session(remotes.development) {

      put from: jar.archivePath.path, into: '/home/vagrant/'
      put from: gsfDependency, into: '/home/vagrant/'
      put from: file('src/main/configuration/web.xml').path, into: '/home/vagrant/'

      executeSudo('service tomcat stop')
      executeSudo('mv /home/vagrant/*.jar /usr/share/tomcat/webapps/cs/WEB-INF/lib/')
      executeSudo('mv /home/vagrant/web.xml /usr/share/tomcat/webapps/cs/WEB-INF/')
      executeSudo('chown tomcat:tomcat -R /usr/share/tomcat/webapps/cs/WEB-INF/')
      execute('ls -la /usr/share/tomcat/webapps/cs/WEB-INF/lib')
      executeSudo('service tomcat start')
    }
  }
}
task deployCsWorkspace(dependsOn: createCsWorkspace) << {
  ssh.run {
    session(remotes.development) {
      executeSudo('rm -Rf /home/vagrant/*.zip')
      executeSudo('rm -Rf /home/vagrant/cs_workspace')
      put from: createCsWorkspace.archivePath.path, into: '/home/vagrant/'
      execute("unzip -o /home/vagrant/${createCsWorkspace.archiveName}")
      executeSudo('rm -Rf /opt/oracle/wcs/export/envision/cs_workspace')
      executeSudo('mv /home/vagrant/cs_workspace /opt/oracle/wcs/export/envision/')
      executeSudo('chown tomcat:tomcat -R /opt/oracle/wcs/export/envision/cs_workspace')
    }
  }
}

task csdtDeploy(dependsOn: deployCsWorkspace) {
	def csdtClass = "uk.co.manifesto.wcs.csdt.ManifestoCSDTWrapper"
	doLast {
	    javaexec {
		  main = csdtClass
		  args = [csdtContentserverUrl, "username=$csdtUsername", "password=$csdtPassword", "cmd=import", "resources=@SITE"]
		  classpath configurations.csdt
	    }    
	}
}

project.afterEvaluate {
  // use jre lib matching version used by project, not the workspace default
  if (project.sourceCompatibility != null) {
    def target = project.sourceCompatibility.toString()
    def containerPrefix = "org.eclipse.jdt.launching.JRE_CONTAINER"
    def containerSuffix
    if (target =~ /1.[4-5]/) {
      containerSuffix = '/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-' + target
    } else if (target =~ /1.[6-8]/) {
      containerSuffix = '/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-' + target
    }
    if (containerSuffix != null) {
      project.eclipse.classpath {
        containers.removeAll { it.startsWith(containerPrefix) }
        containers.add(containerPrefix + containerSuffix)
      }
    }
  }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}